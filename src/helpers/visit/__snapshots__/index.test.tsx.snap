// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`visit when a visitor is passed in to remove certain data should return the correct structure 1`] = `
<ClassComponent
  Component={Symbol(FunctionComponent)}
  callback={[Function]}
  consumer={
    <Context.Consumer>
      <RenderProp(div) />
    </Context.Consumer>
  }
  decorator={<WithTheme(ClassComponent) />}
  element={
    <FunctionComponent
      theme={null}
    />
  }
  forwardRef={<ForwardRefComponent />}
  fragment={<React.Fragment />}
  memo={<Memo(MemoComponent) />}
  portal={
    <Portal(ClassComponent)>
      <FunctionComponent />
    </Portal(ClassComponent)>
  }
  provider={
    <Context.Provider
      value=""
    />
  }
  renderProp={
    <RenderProp(FunctionComponent)
      renderProp={<RenderProp(div) />}
      theme={null}
    />
  }
  styled={Symbol(styled.div)}
  styledFunctionComponent={<Styled(FunctionComponent) />}
  styledStyledComponent={<Styled(styled.div) />}
>
  <ForwardRefComponent />
  <FunctionComponent
    theme={null}
  />
  <Memo(MemoComponent) />
  <Styled(FunctionComponent) />
</ClassComponent>
`;

exports[`visit when run over a serialized component tree should return the correct structure 1`] = `
<ClassComponent
  Component={Symbol(FunctionComponent)}
  callback={[Function]}
  consumer={
    <Context.Consumer>
      <RenderProp(div) />
    </Context.Consumer>
  }
  decorator={<WithTheme(ClassComponent) />}
  element={<FunctionComponent />}
  forwardRef={<ForwardRefComponent />}
  fragment={<React.Fragment />}
  memo={<Memo(MemoComponent) />}
  portal={
    <Portal(ClassComponent)>
      <FunctionComponent />
    </Portal(ClassComponent)>
  }
  provider={
    <Context.Provider
      value=""
    />
  }
  renderProp={
    <RenderProp(FunctionComponent)
      renderProp={<RenderProp(div) />}
    />
  }
  styled={Symbol(styled.div)}
  styledFunctionComponent={<Styled(FunctionComponent) />}
  styledStyledComponent={<Styled(styled.div) />}
>
  <ForwardRefComponent />
  <FunctionComponent />
  <Memo(MemoComponent) />
  <Styled(FunctionComponent) />
</ClassComponent>
`;
